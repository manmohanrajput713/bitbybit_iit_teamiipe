<% layout("/layouts/boilerplate") %>

<div class="container">
  <header>
    <h1 style="color: black; margin-left: 4%;">Job Checkpoint Creation</h1>
    <div id="job-info">
      <strong>Job ID:</strong> <span id="job-id"><%= job._id %></span>
    </div>
  </header>
  
  <div class="card">
    <h2>Create New Checkpoint</h2>
    <form id="checkpoint-form" action="/submitcheckpoints" method="POST">
      <input type="hidden" name="jobId" value="<%= job._id %>">
      
      <div class="form-row">
        <div class="form-group">
          <label for="name">Checkpoint Name</label>
          <input type="text" id="name" name="name" required placeholder="Enter checkpoint name">
        </div>
        <div class="form-group">
          <label for="type">Checkpoint Type</label>
          <select id="type" name="type" required>
            <option value="">Select type</option>
            <option value="start">Start</option>
            <option value="milestone">Milestone</option>
            <option value="verification">Verification</option>
            <option value="approval">Approval</option>
            <option value="completion">Completion</option>
          </select>
        </div>
      </div>
      
      <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" rows="3" placeholder="Describe what needs to be done at this checkpoint"></textarea>
      </div>
      
      <div class="form-group">
        <label>GitHub Commit Dependencies</label>
        <div id="dependencies-list" style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 5px;">
            <!-- Dynamically added commit links will appear here -->
        </div>
        <div style="display: flex; gap: 10px; margin-top: 10px;">
          <input type="url" 
                 id="commit-link" 
                 name="giturl"
                 placeholder="Paste GitHub commit URL"
                 pattern="https://github.com/.*/commit/[a-f0-9]{40}"
                 title="Enter a valid GitHub commit URL"
                 required> <!-- Added required attribute -->
          <button type="button" onclick="addCommitDependency()" class="btn-secondary">Add Commit</button>
      </div>
      
      <div class="form-group">
        <label for="price">Price ($)</label>
        <input type="number" id="price" name="price" required 
               placeholder="Enter price" 
               min="0"
               max="<%= job.budget %>"
               data-max-budget="<%= job.budget %>">
      </div>
      
      <div style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 10px;">
        <button type="button" class="btn-secondary" id="reset-form">Reset</button>
        <div class="loader" id="loader"></div>
        <div class="result" id="result"></div>
        <button type="submit" onclick="analyzeCommit()" class="btn-primary">Add Checkpoint</button>
      </div>
    </form>
  </div>
  
  <div class="checkpoint-list">
    <h2>Job Checkpoints</h2>
    <div id="checkpoints-container">
        <% if (job.checkpoints && job.checkpoints.length > 0) { %>
            <% job.checkpoints.forEach(checkpoint => { %>
              <div class="checkpoint-item" data-checkpoint-id="<%= checkpoint._id %>">
                    <div class="checkpoint-header">
                        <h3>
                            <span class="status-indicator status-<%= checkpoint.status || 'pending' %>"></span>
                            <%= checkpoint.name %>
                        </h3>
                        <div class="checkpoint-actions">
                            <button class="btn-secondary">Edit</button>
                            <form action="/checkpoints/<%= checkpoint._id %>?_method=DELETE" method="POST">
                                <button class="btn-danger">Delete</button>
                            </form>
                        </div>
                    </div>
                    <p><strong>Type:</strong> <%= checkpoint.type %></p>
                    <p><strong>Description:</strong> <%= checkpoint.description %></p>
                    <p><strong>Price:</strong> $<%= checkpoint.price?.toLocaleString() || '0.00' %></p>
                    <% if (checkpoint.commitDependencies?.length > 0) { %>
                        <p><strong>Commit Links:</strong>
                            <% checkpoint.commitDependencies.forEach(url => { %>
                                <a href="<%= url %>" target="_blank" class="commit-link">
                                    <%= url.split('/').pop().substring(0, 7) %>
                                </a>
                            <% }); %>
                        </p>
                    <% } %>
                </div>
            <% }); %>
        <% } else { %>
            <p class="text-muted">No checkpoints created yet</p>
        <% } %>
    </div>
</div>
  <div style="display: flex; justify-content: space-between; margin-top: 20px; height: 30px; ">
    <a href="/jobs/<%= job._id %>" class="btn-secondary">Back to Job</a>
    
  </div>
  
  <div class="footer">
    <p>© 2025 Workly</p>
  </div>
</div>

<script>

  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('checkpoint-form');
    const resetButton = document.getElementById('reset-form');
    const dependenciesList = document.getElementById('dependencies-list');

    // Price validation
    document.getElementById('price').addEventListener('input', function() {
      const maxBudget = parseFloat(this.dataset.maxBudget);
      if (parseFloat(this.value) > maxBudget) {
        this.setCustomValidity(`Price cannot exceed job budget of $${maxBudget.toLocaleString()}`);
      } else {
        this.setCustomValidity('');
      }
    });

    // Reset form
    resetButton.addEventListener('click', function() {
      form.reset();
      dependenciesList.innerHTML = '';
    });

    // Form submission
    form.addEventListener('submit', function(e) {
      const loader = document.getElementById('loader');
      loader.style.display = 'block';
    });
  });

  function addCommitDependency() {
    const commitInput = document.getElementById('commit-link');
    const dependenciesList = document.getElementById('dependencies-list');
    const commitUrl = commitInput.value.trim();
   


    // Basic GitHub URL validation
    if (!commitUrl.match(/https:\/\/github.com\/.*\/commit\/[a-f0-9]{40}/)) {
        alert('Please enter a valid GitHub commit URL');
        return;
    }

    // Add hidden input
    const hiddenInput = document.createElement('input');
    hiddenInput.type = 'hidden';
    hiddenInput.name = 'commitDependencies';
    hiddenInput.value = commitUrl;

    // Add visual tag
    const tag = document.createElement('div');
    tag.className = 'dependency-tag';
    tag.innerHTML = `
        <a href="${commitUrl}" target="_blank" style="color: var(--primary-dark);">
            ${commitUrl.substring(0, 40)}...
        </a>
        <span style="cursor: pointer; margin-left: 8px;" 
              onclick="this.parentElement.remove()">×</span>
    `;

    dependenciesList.appendChild(hiddenInput);
    dependenciesList.appendChild(tag);
    commitInput.value = '';
}


  
function analyzeCommit() {
  const commitLink = document.getElementById('commit-link').value;
  const loader = document.getElementById('loader');
  const resultDiv = document.getElementById('result');

  const nameofid = document.getElementById('name').value.toString();
  console.log(nameofid);

  if (!commitLink) {
      resultDiv.textContent = 'Please enter a GitHub commit URL.';
      resultDiv.style.color = 'red';
      return;
  }

  // Show loader
  loader.style.display = 'block';
  resultDiv.textContent = '';
  
  // Send to webhook
  fetch('https://hook.eu2.make.com/yjhg9dq9rprek4oyqod6fodc6fokdide', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
          githubUrl: commitLink, 
          
      }),
  })
  .then(response => {
      loader.style.display = 'none';
      if (response.ok) {
          resultDiv.textContent = 'Commit analysis started successfully!';
          resultDiv.style.color = 'green';
      } else {
          resultDiv.textContent = 'Error sending data';
          resultDiv.style.color = 'red';
      }
  })
  .catch(error => {
      loader.style.display = 'none';
      resultDiv.textContent = 'Error: ' + error.message;
      resultDiv.style.color = 'red';
  });
}
  // Edit Functionality
document.querySelectorAll('.checkpoint-actions .btn-secondary').forEach(editBtn => {
    editBtn.addEventListener('click', async function() {
        const checkpointItem = this.closest('.checkpoint-item');
        const checkpointId = checkpointItem.dataset.checkpointId;
        
        try {
            const response = await fetch(`/checkpoints/${checkpointId}`);
            const checkpoint = await response.json();

            // Populate form
            document.getElementById('name').value = checkpoint.name;
            document.getElementById('type').value = checkpoint.type;
            document.getElementById('description').value = checkpoint.description;
            document.getElementById('price').value = checkpoint.price;

            // Clear and repopulate dependencies
            const dependenciesList = document.getElementById('dependencies-list');
            dependenciesList.innerHTML = '';
            checkpoint.commitDependencies.forEach(url => {
                addCommitDependencyToUI(url);
            });

            // Change form to edit mode
            const form = document.getElementById('checkpoint-form');
            form.action = `/checkpoints/${checkpointId}?_method=PUT`;
            form.querySelector('button[type="submit"]').textContent = 'Update Checkpoint';
            
            // Add hidden jobId
            const jobIdInput = document.createElement('input');
            jobIdInput.type = 'hidden';
            jobIdInput.name = 'jobId';
            const giturl = document.getElementById('commit-link').value;
            formData.append('giturl', giturl);
            jobIdInput.value = checkpoint.jobId;
            form.appendChild(jobIdInput);
            // Modified form submission handler
document.getElementById('checkpoint-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    
    // Manually ensure giturl is captured
    const giturl = document.getElementById('commit-link').value;
    formData.append('giturl', giturl);

    try {
        const loader = document.getElementById('loader');
        loader.style.display = 'block';

        const response = await fetch(form.action, {
            method: form.method,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(formData)
        });

        if (response.redirected) {
            window.location.href = response.url;
        } else {
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.message || 'Submission failed');
            }
        }
    } catch (error) {
        alert(`Error: ${error.message}`);
    } finally {
        loader.style.display = 'none';
    }
});

// Updated dependency adder
function addCommitDependency() {
    const input = document.getElementById('dependency-input');
    const url = input.value.trim();
    
    if (!url.match(/https:\/\/github.com\/.*\/commit\/[a-f0-9]{40}/)) {
        alert('Invalid GitHub commit URL');
        return;
    }

    const dependenciesList = document.getElementById('dependencies-list');
    
    // Add hidden input
    const hiddenInput = document.createElement('input');
    hiddenInput.type = 'hidden';
    hiddenInput.name = 'commitDependencies';
    hiddenInput.value = url;

    // Add visual tag
    const tag = document.createElement('div');
    tag.className = 'dependency-tag';
    tag.innerHTML = `
        <a href="${url}" target="_blank">${url.substring(0, 40)}...</a>
        <button class="remove-tag" onclick="this.parentElement.remove()">×</button>
    `;

    dependenciesList.appendChild(hiddenInput);
    dependenciesList.appendChild(tag);
    input.value = '';
}

        } catch (error) {
            console.error('Error fetching checkpoint:', error);
            alert('Error loading checkpoint data');
        }
    });
});

// Delete Functionality
// Updated Delete Functionality
document.querySelectorAll('.checkpoint-actions .btn-danger').forEach(deleteBtn => {
    deleteBtn.addEventListener('click', async function(e) {
        e.preventDefault();
        const checkpointItem = this.closest('.checkpoint-item');
        const checkpointId = checkpointItem.dataset.checkpointId;

        if (confirm('Are you sure you want to delete this checkpoint?')) {
            try {
                const response = await fetch(`/checkpoints/${checkpointId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    checkpointItem.remove();
                } else {
                    alert(result.message || 'Error deleting checkpoint');
                }
                
            } catch (error) {
                console.error('Error deleting checkpoint:', error);
                alert('Network error - please check your connection');
            }
        }
    });
});

// Universal Form Submission Handler
// Replace the form submit event listener with:
document.getElementById('checkpoint-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    
    // Convert FormData to URL-encoded format
    const urlEncoded = new URLSearchParams(formData).toString();

    try {
        const loader = document.getElementById('loader');
        loader.style.display = 'block';

        const response = await fetch(form.action, {
            method: form.method,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: urlEncoded
        });

        if (response.redirected) {
            window.location.href = response.url;
        } else {
            const result = await response.json();
            if (!response.ok) throw new Error(result.message);
        }
    } catch (error) {
        alert(`Error: ${error.message}`);
    } finally {
        loader.style.display = 'none';
    }
});

function addCommitDependencyToUI(url) {
    const dependenciesList = document.getElementById('dependencies-list');
    
    const hiddenInput = document.createElement('input');
    hiddenInput.type = 'hidden';
    hiddenInput.name = 'commitDependencies';
    hiddenInput.value = url;

    const tag = document.createElement('div');
    tag.className = 'dependency-tag';
    tag.innerHTML = `
        <a href="${url}" target="_blank">${url.substring(0, 40)}...</a>
        <span onclick="this.parentElement.remove()">×</span>
    `;

    dependenciesList.appendChild(hiddenInput);
    dependenciesList.appendChild(tag);
}
</script>


 
